{"question_id": 1, "category": "coding", "turns": ["ディレクトリ内の全てのテキストファイルを読み込み、出現回数が最も多い上位5単語を返すPythonプログラムを開発してください。", "それを並列化（parallelize）することは可能ですか？"]}
{"question_id": 2, "category": "coding", "turns": ["再帰（recursion）を用いてn番目のフィボナッチ数（Fibonacci number）を求めるC++プログラムを書いてください。", "今度は、各数が前の3つの数の和である数列を考えます。最初の3つの数は0、-1、-1です。n番目の数を求めるプログラムを書いてください。"]}
{"question_id": 3, "category": "coding", "turns": ["HTMLでシンプルなウェブサイトを作成してください。ユーザーがボタンをクリックすると、4つのジョークからランダムに一つが表示されるようにしてください。", "CSSを使ってジョークの色を赤にする方法を教えてください。"]}
{"question_id": 4, "category": "coding", "turns": ["以下に、二つの入力文字列の最長共通部分列（longest common subsequence）の長さを求めるPython関数があります。この関数には何かバグがありますか？\n\n```\ndef longest_common_subsequence_length(str1, str2):\n    m = len(str1)\n    n = len(str2)\n\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n```", "では、この関数はどうでしょうか？\n\n```\ndef longest_common_subsequence(X , Y): \n    # Find lengths of two strings \n    m = len(X) \n    n = len(Y) \n  \n    # Create a table to store results of sub-problems \n    dp = [[None]*(n+1) for i in range(m+1)] \n  \n    # Fill dp[][] in bottom up manner \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            if X[i-1] == Y[j-1]: \n                dp[i][j] = dp[i-1][j-1]+1\n            else: \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n  \n    return dp[m][n]\n```"]}
{"question_id": 5, "category": "coding", "turns": ["バイナリツリー（binary tree）の2つのノードの最高の共通祖先（highest common ancestor）を見つける関数を書いてください。", "それが二分木でない場合はどうなりますか？"]}
{"question_id": 6, "category": "coding", "turns": ["O(1)の空間複雑度（space complexity）とO(n)の時間複雑度（time complexity）で、異なるサイズの2つのソートされた配列の中央値（median）を見つける関数を実装してください。", "より良い時間複雑度を持つ実装は存在しますか？"]}
{"question_id": 7, "category": "coding", "turns": ["Boyer-Moore投票アルゴリズム（Boyer-Moore Voting Algorithm）を使用して、指定された整数配列の過半数要素（majority element）を見つける関数を書いてください。", "最も多く出現する上位2要素を見つけるにはどうすればいいですか？"]}
{"question_id": 8, "category": "coding", "turns": ["バイナリツリーがすべての頂点が0個または2個の子を持つ場合、それは完全であると言います。B_nをn個の頂点を持つ完全なバイナリツリーの数とします。B_nを見つける関数を実装してください。", "問題がバイナリツリーから三分木（ternary tree）に変わったらどうなりますか？"]}
{"question_id": 9, "category": "coding", "turns": ["あなたはサイズmとnの2つのソートリストを与えられます。二つのリストの合計からk番目に小さい要素を見つける関数を線形の複雑度で実装してください。", "より良い時間複雑度を持つアルゴリズムは存在しますか？もしあれば、それを実装してください。"]}
{"question_id": 10, "category": "coding", "turns": ["追加のデータ構造を使わずに、二つの配列の共通要素を見つけるプログラムを実装してください。", "今度は、追加のデータ構造の使用制限がなくなりました。最良の時間複雑度を持つ実装を行ってください。"]}